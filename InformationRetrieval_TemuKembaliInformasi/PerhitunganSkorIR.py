# -*- coding: utf-8 -*-
"""PerhitunganSkorIR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SfET-i6OXdPiJju1mgPqYyeN7tqojzez
"""

import pandas as pd
import numpy as np

"""Membaca dataset dari GitHub"""

url = 'https://raw.githubusercontent.com/syuhraputri27/InformationRetrieval_DataMhs/main/InformationRetrieval_TemuKembaliInformasi/crawlDataMhs.csv'
df = pd.read_csv(url)
df.head()

"""Mengassign dataframe ke variabel data"""

data = df[['Nama', 'NIM','Organisasi/UKM & Periode','Foto']]
data.head()

"""Menggabungkan/merge data menjadi satu"""

df['dokumen'] = df.apply(lambda x: '%s %s %s %s' % (x['Nama'],x['NIM'],x['Organisasi/UKM & Periode'],x['Foto']),axis=1)
df['dokumen'].head()

"""Menghitung term di setiap dokumen"""

from sklearn.feature_extraction.text import CountVectorizer

v = CountVectorizer()
vects = v.fit_transform(df['dokumen'])

td = pd.DataFrame(vects.toarray())
td.columns = v.get_feature_names_out()
term_document_matrix = td

term_document_matrix.to_csv('termDoc.csv')
term_document_matrix.head()

"""Mengitung nilai TF-IDF"""

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['dokumen'])

df.to_csv('Tfidf.csv')

df = pd.DataFrame(X.T.toarray(), index=vectorizer.get_feature_names())
df.head()

"""Menghitung nilai cosine similiarity"""

import textwrap

wrapper = textwrap.TextWrapper(width=120)

def get_data_mhs(q, df):
  print("Data mahasiswa paling relevan (nilai cosine similiarity tertinggi) :")
  q = [q]
  q_vec = vectorizer.transform(q).toarray().reshape(df.shape[0],)
  similiarity = {}
  for i in range(42) :
    similiarity[i] = np.dot(df.loc[:, i].values, q_vec) / np.linalg.norm(df.loc[:,i]) * np.linalg.norm(q_vec)

  sorted_sim = sorted(similiarity.items(), key=lambda x: x[1], reverse=True)
  i = 1
  for k, v in sorted_sim:
    if i<=10 :
      print(i,". ", data.title[k])
      print("Nilai Similiaritas : ", v)
      print(wrapper.fill(data.clean_content[k]))
      print(data.url[k])
      print()
    i+=1
  
  query = ''

  get_data_mhs(input("Masukan data mahasiswa yang Anda cari : " +query), df)